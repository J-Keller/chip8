//
// Created by viking on 11/21/22.
//

#ifndef CHIP8_MEMORY_H
#define CHIP8_MEMORY_H


#include <vector>

class Memory {
public:
    Memory();
    int write(std::vector<unsigned char>, unsigned short);
    unsigned short readInstruction(unsigned short pc);
    unsigned char readByte(unsigned short address);
    unsigned short getFontAddress(unsigned char character);

    // used for debug
    unsigned char *readMemoryContent();

    void printMemory();
protected:
private:
    unsigned char font[80] = {
            0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
            0x20, 0x60, 0x20, 0x20, 0x70, // 1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
            0x90, 0x90, 0xF0, 0x10, 0x10, // 4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
            0xF0, 0x10, 0x20, 0x40, 0x40, // 7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
            0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
            0xF0, 0x90, 0xF0, 0x90, 0x90, // A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
            0xF0, 0x80, 0x80, 0x80, 0xF0, // C
            0xE0, 0x90, 0x90, 0x90, 0xE0, // D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
            0xF0, 0x80, 0xF0, 0x80, 0x80  // F
    };
    unsigned char ram[4096] = {};
    const short legacyOffset = 0x200; // The first chip8 interpreter was also located in the ram, and expected programs to be loaded starting from address 0x200

    void initializeMemory();
};


#endif //CHIP8_MEMORY_H
